
Perfomance Measurement 1 (PM1): Offline Validator
Goal: Detect how long a validator is offline and punish them 
Detection: Validator does not act as a leader

Tendermint provides a statistic on failed blocks, i.e., validators that did not act properly as a leader.
Over an epoch, the number of such faiulures (f) is counted, as well as the number of times the validator 
was elected leader (l).

During the payout, the paymenty is reduced by multipling it with (l-f)/l
This is done before the delegator part is substracted, i.e., delegators are punished for bad validator behavior.


##Future Stuff (in here for discussion purposes, not yet to be implemented)
# Non Linear punishment
Currently, PM1 does a linear reduction of payment - maybe an s-curve would be better so that small violations are punished less, 
while a validator that is offline half the time gets more than 50% substraction. For example, 1/(1+2^((3*x-1)*10)) would punish
small failures less, and bigger failures pretty radically.

# PM2: Validator does not verify signatures
To detect this, validators need to issue tagged signatures from time to time.
     The tagged signature is the original signed message with the tag [TAGGED] associated to it.
     Thus, the normal signature verification for message m will fail, and the verifier is supposed
     to verify m|”TAGGED”
     The verifier is then required  (if using this signature to validate anything) to flag that
      The signature pool contains a tagged signature and which one it is.
      Failure to do so provably shows that the signature was not verified properly.
      
 # PM3: Va;lidator does not run event forwarder
 This is difficult to detect, as a validator may legitimatelly see Ethereum events a few seconds after other validators
 and thus never get an event to forward. Also, eventually EEF will be integrated into core, and thus it will be more
 effort to not run that part of the code.
Idea: A validator that forwarded less than 50% of the events of the other validators
   gets malus on the reward, provided the median validator forwarded at least 100 events
   in that epoch.
A validator that forwards no event in an epoch gets a bigger punishment, given the same constraint.

Median is chosen so that a single validator can’t frame the others by shortening the Ethereum
Block confirmation times.

#PM5: Validator only acts as a Tenderint leader.
Finding this requires a statistic we don't have at this point (as we would like to also include messages that where sent but don't 
contribute to consensus anymore to avoid discriminating against geographically far away servers. Once we figured out how to do
this, we can build a formular for the reward

#PM6: Validator doesn't execute the Vega app, just signs everything the others do.
THis needs further investigation; it is probably possible to solve this either the
same way we detect signature verification, or along the lines of the data-node 
(i.e., Validators are required to post some internal state information from time to
time that they only have if they run the protocol)

